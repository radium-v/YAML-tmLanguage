# [PackageDev] target_format: plist, ext: tmLanguage
---
name: TextMate Syntax Definition (YAML)
fileTypes: [YAML-tmLanguage]
scopeName: source.yaml-tmlanguage
uuid: 112dad9d-558e-4ab2-a4cc-c5f1ffa80ee6

patterns:
## first, match the global stuff
- name: entity.other.document-start.yaml-tmlanguage
  match: ^---(?=\s|$)

- name: entity.other.document-end.yaml-tmlanguage
  match: ^\.{3}$

- name: invalid.illegal.tab-indent.yaml-tmlanguage
  match: ^\t+

- include: '#comment'

- include: '#variables'

## second, match content
# in-repo
- include: '#repository'

# main scope
- include: '#uuid'
- include: '#name-main'
- include: '#injection-selector'
- include: '#scope-name'
- include: '#file-types'
- include: '#author'
- include: '#key-equivalent'
- include: '#other-markers'

# child scope
- include: '#patterns'
- include: '#captures'

- include: '#name'
- include: '#match'
- include: '#include'
- include: '#comment-from-key'
- include: '#number-key'

# the other remaining keys
- include: '#repository-key-inline'

# match for comments again after consuming the other sequences
- include: '#comment'

# unmatched but (probably) valid stuff
- include: '#unmatched'

# everything else should remain unmatched
# - include: '#illegal'

#######################################

repository:

# control sequences
  comment:
    match: (?:^\s*|\G\s*|\s+)((#).*\n?)
    captures:
      '1': {name: comment.line.number-sign.yaml-tmlanguage}
      '2': {name: punctuation.definition.comment.line.yaml-tmlanguage}

# special keys (main scope)
  uuid:
    name: meta.uuid.yaml-tmlanguage
    match: (?:,|\{\s*|^)((["']?)(uuid|bundleUUID)(\2))(:)\s+((["']?)(\h{8}-\h{4}-\h{4}-\h{4}-\h{12})(\7))
    captures:
      '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
      '2': {name: punctuation.definition.string.yaml-tmlanguage}
      '3': {name: keyword.other.uuid.yaml-tmlanguage}
      '4': {name: punctuation.definition.string.yaml-tmlanguage}
      '5': {name: keyword.control.definition.yaml-tmlanguage}

      #'6': {name: string.other.quoted-or-unquoted.yaml-tmlanguage} # "string constant" is assigned by certain color schemes
      '7': {name: punctuation.definition.string.yaml-tmlanguage}
      '8': {name: constant.numeric.uuid.yaml-tmlanguage}
      '9': {name: punctuation.definition.string.yaml-tmlanguage}

  name-main:
    # This one is allowed to contain nearly all characters instead of
    # the scope defining 'name' (not recognized in flow style, i.e. after ",")
    # Note: Please refuse to use " or ' in your syntax name, it makes things complicated
    name: meta.name-main.yaml-tmlanguage
    match: ^((["']?)(name)(\2))(:)\+((["']?).*?(\7))(?=,\s|,$|\s+#|\s*$|\s*})
    captures:
      '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
      '2': {name: punctuation.definition.string.yaml-tmlanguage}
      '3': {name: keyword.other.name.yaml-tmlanguage}
      '4': {name: punctuation.definition.string.yaml-tmlanguage}
      '5': {name: keyword.control.definition.yaml-tmlanguage}

      '6': {name: entity.other.name.yaml-tmlanguage}
      '7': {name: punctuation.definition.string.yaml-tmlanguage}
      '8': {name: punctuation.definition.string.yaml-tmlanguage}

  injection-selector:
    name: meta.injection-selector
    match: (?:,|\{\s*|^)((["']?)(injectionSelector)(\2))(:)\s+((["']?)[-:\w\.,\s]*(\7))
    captures:
      '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
      '2': {name: punctuation.definition.string.yaml-tmlanguage}
      '3': {name: keyword.other.injectionSelector.yaml-tmlanguage}
      '4': {name: punctuation.definition.string.yaml-tmlanguage}
      '5': {name: keyword.control.definition.yaml-tmlanguage}

      '6': {name: meta.value string.other.quoted-or-unquoted.yaml-tmlanguage}
      '7': {name: punctuation.definition.string.yaml-tmlanguage}
      '8': {name: punctuation.definition.string.yaml-tmlanguage}

  scope-name:
    name: meta.scope-name.yaml-tmlanguage
    match: (?:,|\{\s*|^)((["']?)(scopeName)(\2))(:)\s+((["']?)[-\w\.\s]*(\7))
    captures:
      '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
      '2': {name: punctuation.definition.string.yaml-tmlanguage}
      '3': {name: keyword.other.name.yaml-tmlanguage}
      '4': {name: punctuation.definition.string.yaml-tmlanguage}
      '5': {name: keyword.control.definition.yaml-tmlanguage}

      '6': {name: meta.value.yaml-tmlanguage string.other.quoted-or-unquoted.yaml-tmlanguage}
      '7': {name: punctuation.definition.string.yaml-tmlanguage}
      '8': {name: punctuation.definition.string.yaml-tmlanguage}

  file-types:
    patterns:
    # single-line
    - name: meta.file-types.yaml-tmlanguage
      begin: (?:,\s+|\{\s*|^)((["']?)(fileTypes)(\2))(:)\s(\[)
      beginCaptures:
        '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
        '2': {name: punctuation.definition.string.yaml-tmlanguage}
        '3': {name: keyword.other.name.yaml-tmlanguage}
        '4': {name: punctuation.definition.string.yaml-tmlanguage}
        '5': {name: keyword.control.definition.yaml-tmlanguage}
        '6': {name: keyword.control.list.opening-bracket.yaml-tmlanguage}
      end: \]
      endCaptures:
        '0': {name: keyword.control.list.closing-bracket.yaml-tmlanguage}
      patterns:
        # items (in array)
        - match: (?:\G|^),?\s*((["']?)([-\w\._]+)(\2))(?=,\s|,$|\s+#|\s*\Z|\s*\])
          captures:
            '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
            '2': {name: punctuation.definition.string.yaml-tmlanguage}
            '3': {name: support.other.file-types.item.yaml-tmlanguage}
            '4': {name: punctuation.definition.string.yaml-tmlanguage}
        - include: '#comment'

    # multi-line
    - name: meta.file-types.yaml-tmlanguage
      begin: (?:,\s+|\{\s*|^)((["']?)(fileTypes)(\2))(:)(?=\s+#|\s*$)
      beginCaptures:
        '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
        '2': {name: punctuation.definition.string.yaml-tmlanguage}
        '3': {name: keyword.other.name.yaml-tmlanguage}
        '4': {name: punctuation.definition.string.yaml-tmlanguage}
        '5': {name: keyword.control.definition.yaml-tmlanguage}
      end: ^(?!$|-| *#)
      patterns:
        # multi-line items
        - match: ^-\s+((["']?)([-\w\.\s_]+)(\2))(?=\s+#|\s*$)
          captures:
            '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
            '2': {name: punctuation.definition.string.yaml-tmlanguage}
            '3': {name: support.other.file-types.item.yaml-tmlanguage}
            '4': {name: punctuation.definition.string.yaml-tmlanguage}
        - include: '#comment'

  repository:
    patterns:
    # inline (who'd even use this?)
    # Note: probably broken with line breaks AFTER { or ,
    - name: meta.repository.yaml-tmlanguage
      match: (?:,\s+|\{\s*)((["']?)(repository)(\2))(:)
      captures:
        '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
        '2': {name: punctuation.definition.string.yaml-tmlanguage}
        '3': {name: entity.other.repository.yaml-tmlanguage}
        '4': {name: punctuation.definition.string.yaml-tmlanguage}
        '5': {name: keyword.control.definition.yaml-tmlanguage}

    # multi-line (this is what you want)
    - name: meta.repository-block.yaml-tmlanguage
      begin: ^((["']?)(repository)(\2))(:)
      beginCaptures:
        '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
        '2': {name: punctuation.definition.string.yaml-tmlanguage}
        '3': {name: entity.other.repository.yaml-tmlanguage}
        '4': {name: punctuation.definition.string.yaml-tmlanguage}
        '5': {name: keyword.control.definition.yaml-tmlanguage}
      end: ^(?!\s*($|#))(?=\S)
      patterns:
        - include: '#comment'
        - include: '#repository-key'

        # child scope
        - include: '#patterns'
        - include: '#captures'

        - include: '#name'
        - include: '#match'
        - include: '#include'
        - include: '#comment-from-key'
        - include: '#number-key'

        - include: '#comment'
        - include: '#unmatched'
        - include: '#illegal'

# in-block special keys
  name:
    name: meta.name.yaml-tmlanguage
    match: (?:,\s+|\{\s*|^\s{2,}|^\s*-\s+)((["']?)(contentName|name)(\2))(:)\s+((["']?)[-\w\.\s]*(\7))
    captures:
      '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
      '2': {name: punctuation.definition.string.yaml-tmlanguage}
      '3': {name: keyword.other.name.yaml-tmlanguage}
      '4': {name: punctuation.definition.string.yaml-tmlanguage}
      '5': {name: keyword.control.definition.yaml-tmlanguage}
      '6': {name: meta.value.yaml-tmlanguage string.other.quoted-or-unquoted.yaml-tmlanguage}
      '7': {name: punctuation.definition.string.yaml-tmlanguage}
      '8': {name: punctuation.definition.string.yaml-tmlanguage}

  author:
    name: meta.author.yaml-tmlanguage
    match: (?:,|\{\s*|^)((["']?)(author)(\2))(:)\s+((["']?).*(\7))
    captures:
      '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
      '2': {name: punctuation.definition.string.yaml-tmlanguage}
      '3': {name: keyword.other.name.author.yaml-tmlanguage}
      '4': {name: punctuation.definition.string.yaml-tmlanguage}
      '5': {name: keyword.control.definition.yaml-tmlanguage}
      '6': {name: meta.value.yaml-tmlanguage string.other.quoted-or-unquoted.yaml-tmlanguage}
      '7': {name: punctuation.definition.string.yaml-tmlanguage}
      '8': {name: punctuation.definition.string.yaml-tmlanguage}

  key-equivalent:
    name: meta.key-equivalent.yaml-tmlanguage
    match: (?:,|\{\s*|^)((["']?)(keyEquivalent)(\2))(:)\s+((["']?).*(\7))
    captures:
      '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
      '2': {name: punctuation.definition.string.yaml-tmlanguage}
      '3': {name: keyword.other.name.key-equivalent.yaml-tmlanguage}
      '4': {name: punctuation.definition.string.yaml-tmlanguage}
      '5': {name: keyword.control.definition.yaml-tmlanguage}
      '6': {name: meta.value.yaml-tmlanguage string.other.quoted-or-unquoted.yaml-tmlanguage}
      '7': {name: punctuation.definition.string.yaml-tmlanguage}
      '8': {name: punctuation.definition.string.yaml-tmlanguage}

  # firstLineMatch/foldingStartMarker/foldingStopMarker
  other-markers:
    patterns:
    # multi-line (block style)
    - name: meta.other-marker.block.yaml-tmlanguage
      contentName: meta.value.yaml-tmlanguage
      begin: ^(\s*)?(?:-\s+)?((["']?)(firstLineMatch|foldingStartMarker|foldingStopMarker)(\3))(:)\s+([|>])(?=,\s|,$|\s+#|\s*$)
      beginCaptures:
        '2': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
        '3': {name: punctuation.definition.string.yaml-tmlanguage}
        '4': {name: keyword.other.name.other-marker.yaml-tmlanguage}
        '5': {name: punctuation.definition.string.yaml-tmlanguage}
        '6': {name: keyword.control.definition.yaml-tmlanguage}
        '7': {name: keyword.control.block.yaml-tmlanguage}
      end: ^(?!\s*$|\1\s)
      patterns:
      - include: '#comment'
      - include: source.oniregexp

    # single-line (quoted)
    - name: meta.other-marker.yaml-tmlanguage
      contentName: meta.value.yaml-tmlanguage
      begin: (?:,\s+|\{\s*|^\s{2,}|^\s*-\s+)?((["']?)(firstLineMatch|foldingStartMarker|foldingStopMarker)(\2))(:)\s+(["'])
      beginCaptures:
        '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
        '2': {name: punctuation.definition.string.yaml-tmlanguage}
        '3': {name: keyword.other.name.other-marker.yaml-tmlanguage}
        '4': {name: punctuation.definition.string.yaml-tmlanguage}
        '5': {name: keyword.control.definition.yaml-tmlanguage}
        '6': {name: punctuation.definition.string.yaml-tmlanguage}
      end: \6(?!\6)
      endCaptures:
        '0': {name: punctuation.definition.string.yaml-tmlanguage}
      patterns:
      - match: "''"
        name: test
      - include: source.oniregexp

    # single-line (unquoted)
    - name: meta.other-marker.yaml-tmlanguage
      contentName: meta.value.yaml-tmlanguage
      begin: (?:,\s+|\{\s*|^\s{2,}|^\s*-\s+)?((["']?)(firstLineMatch|foldingStartMarker|foldingStopMarker)(\2))(:)\s+(?!["'])
      beginCaptures:
        '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
        '2': {name: punctuation.definition.string.yaml-tmlanguage}
        '3': {name: keyword.other.name.other-marker.yaml-tmlanguage}
        '4': {name: punctuation.definition.string.yaml-tmlanguage}
        '5': {name: keyword.control.definition.yaml-tmlanguage}
      end: (?=, |,$| +[#{\['"]| *$| *})
      patterns:
      - include: source.oniregexp

  match:
    patterns:
    # multi-line (block style)
    - name: meta.match.block.yaml-tmlanguage
      contentName: meta.value.yaml-tmlanguage
      begin: ^(\s*)-?(\s+)((["']?)(match|begin|end)(\4))(:)\s+([|>](\d*)[-+]?)(?=,\s|,$|\s+#|\s*$)
      beginCaptures:
        '3': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
        '4': {name: punctuation.definition.string.yaml-tmlanguage}
        '5': {name: keyword.other.match.yaml-tmlanguage}
        '6': {name: punctuation.definition.string.yaml-tmlanguage}
        '7': {name: keyword.control.definition.yaml-tmlanguage}
        '8': {name: keyword.control.block.yaml-tmlanguage}
        '9': {name: constant.numeric.indentation-indicator.yaml-tmlanguage}
      # must be indented by at least as much as the key line + 1 (+ 1 for the potential '-')
      end: ^(?!\s*$|\1\2\s\s)
      patterns:
      - include: '#comment' # for comments after the "|" or ">"
      - include: source.oniregexp

    # single-line (quoted)
    - name: meta.match.yaml-tmlanguage
      contentName: meta.value.yaml-tmlanguage
      begin: (?:,\s+|\{\s*|^\s{2,}|^\s*-\s+)((["']?)(match|begin|end)(\2))(:)\s+(["'])
      beginCaptures:
        '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
        '2': {name: punctuation.definition.string.yaml-tmlanguage}
        '3': {name: keyword.other.match.yaml-tmlanguage}
        '4': {name: punctuation.definition.string.yaml-tmlanguage}
        '5': {name: keyword.control.definition.yaml-tmlanguage}
        '6': {name: punctuation.definition.string.yaml-tmlanguage}
      end: \6(?!\6)
      endCaptures:
        '0': {name: punctuation.definition.string.yaml-tmlanguage}
      patterns:
      # Consume double-escaped single quotes so they won't interfere with the "end" match
      - match: "''"
      - match: '""'
      - include: source.oniregexp

    # single-line (unquoted)
    - name: meta.match.yaml-tmlanguage
      contentName: meta.value.yaml-tmlanguage
      begin: (?:,\s+|\{\s*|^\s{2,}|^\s*-\s+)((["']?)(match|begin|end)(\2))(:)(?:(?=\s+#)|\s+(?!["'\[{]))
      beginCaptures:
        '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
        '2': {name: punctuation.definition.string.yaml-tmlanguage}
        '3': {name: keyword.other.match.yaml-tmlanguage}
        '4': {name: punctuation.definition.string.yaml-tmlanguage}
        '5': {name: keyword.control.definition.yaml-tmlanguage}
      # This regexp is complex due to the many possibilities to terminate a string.
      end: (?=,\s|,$|\s+[#{\[]|\s*$|\s*})
      patterns:
      - include: source.oniregexp

  include:
    name: meta.include.yaml-tmlanguage
    match: | # example for multi-line match blocks (remember to escape " " spaces when using (?x))
      (?x)
      (?:,\s+|\{\s*|^\s{2,}|^\s*-\s+)
        ((["']?)(include)(\2))(:)\s+
      ((["'])(?:(\$self)
             |\#?([-\w\.\s]*)) (\7)
      |(\$self)
      |([-\w\.\s]*)
      )
    captures:
      '1':  {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
      '2':  {name: punctuation.definition.string.yaml-tmlanguage}
      '3':  {name: keyword.other.include.yaml-tmlanguage}
      '4':  {name: punctuation.definition.string.yaml-tmlanguage}
      '5':  {name: keyword.control.definition.yaml-tmlanguage}

      '6':  {name: meta.value.yaml-tmlanguage string.other.quoted-or-unquoted.yaml-tmlanguage}
      '7':  {name: punctuation.definition.string.yaml-tmlanguage}
      '8':  {name: storage.modifier.self-include.yaml-tmlanguage}
      '9':  {name: variable.other.include.yaml-tmlanguage}
      '10': {name: punctuation.definition.string.yaml-tmlanguage}
      '11': {name: storage.modifier.self-include.yaml-tmlanguage}
      '12': {name: variable.other.include.yaml-tmlanguage}

  comment-from-key:
    patterns:
    # block style
    - name: meta.comment-from-key.block.yaml-tmlanguage
      contentName: comment.block.from-key.block.yaml-tmlanguage
      comment: | # real comment
        block
        comment
      begin: ^(\s*)(?:-\s+)?((["']?)(comment)(\3))(:)\s+([|>](\d*)[-+]?)(?=,\s|,$|\s+#|\s*$)
      beginCaptures:
        '2': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
        '3': {name: punctuation.definition.string.yaml-tmlanguage}
        '4': {name: keyword.other.comment-from-key.yaml-tmlanguage}
        '5': {name: punctuation.definition.string.yaml-tmlanguage}
        '6': {name: keyword.control.definition.yaml-tmlanguage}
        '7': {name: keyword.control.block.yaml-tmlanguage}
        '8': {name: constant.numeric.indentation-indicator.yaml-tmlanguage}
      # must be indented by at least as much as the key line + 1
      end: ^(?!\s*$|\1\s)

    # quoted
    # TODO: consider " and ' separately as they use different escape mechanisms actually
    - name: meta.comment-from-key.quoted.yaml-tmlanguage
      contentName: comment.block.from-key.quoted.yaml-tmlanguage
      comment: "test comment
        over multiple lines?"
      begin: (?:,\s+|\{\s*|^\s*|^\s*-\s+)((["']?)(comment)(\2))(:)\s+(?!#)(["'])
      beginCaptures:
        '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
        '2': {name: punctuation.definition.string.yaml-tmlanguage}
        '3': {name: keyword.other.comment-from-key.yaml-tmlanguage}
        '4': {name: punctuation.definition.string.yaml-tmlanguage}
        '5': {name: keyword.control.definition.yaml-tmlanguage}
        '6': {name: punctuation.definition.string.yaml-tmlanguage}
      end: (?<![^\\]\\)(\6)(?=,\s|,$|\s+#|\s*$|\s*})
      endCaptures:
        '1': {name: punctuation.definition.string.yaml-tmlanguage}

    # unquoted
    - name: meta.comment-from-key.unquoted.yaml-tmlanguage
      contentName: comment.block.from-key.unquoted.yaml-tmlanguage
      comment: this is a "test" comment
        in another line # and this is a real comment
      begin: ^(\s*)(?:-(\s+))?((["']?)(comment)(\4))(:)[\s]
      beginCaptures:
        '3': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
        '4': {name: punctuation.definition.string.yaml-tmlanguage}
        '5': {name: keyword.other.comment-from-key.yaml-tmlanguage}
        '6': {name: punctuation.definition.string.yaml-tmlanguage}
        '7': {name: keyword.control.definition.yaml-tmlanguage}
      # Must be indented by at least as much as the key line + 1 - or terminated by :stuff:
      # Note1: can not differentiate if within inline ({) or block and thus
      # the inline terminating sequences which are valid in blocks are ignored completely.
      # Currently only interesting for "comment: no # still no"
      # Note2: Minimum indent is "  " if the comment key is not the first key in a list
      # (e.g. "- name: something\n  comment: dd"). Easiest workaroung.
      end: ^(?! *$|\1\2  ) #|(?<=.)(?=, |,$| +#| *(?<![^\\]\\)})

# dict keys
  captures:
    name: meta.captures.yaml-tmlanguage
    match: (?:,\s+|\{\s*|^\s{2,}|^\s*-\s+)((["']?)((?:(?:begin|end)C|c)aptures)(\2))(:)
    captures:
      '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
      '2': {name: punctuation.definition.string.yaml-tmlanguage}
      '3': {name: entity.other.captures.yaml-tmlanguage}
      '4': {name: punctuation.definition.string.yaml-tmlanguage}
      '5': {name: keyword.control.definition.yaml-tmlanguage}

  patterns:
    name: meta.patterns.yaml-tmlanguage
    # "patterns" is one of the 2 keys that are also allowed (required) in global scope
    match: (?:,\s+|\{\s*|^\s*|^\s*-\s+)((["']?)(patterns)(\2))(:)
    captures:
      '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
      '2': {name: punctuation.definition.string.yaml-tmlanguage}
      '3': {name: support.type.patterns.patterns.yaml-tmlanguage}
      '4': {name: punctuation.definition.string.yaml-tmlanguage}
      '5': {name: keyword.control.definition.yaml-tmlanguage}

# variable keys
  number-key:
    name: meta.number-key.yaml-tmlanguage
    match: (?:,\s+|\{\s*|^\s*)((["'])(\d+)(\2))(:)
    captures:
      '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
      '2': {name: punctuation.definition.string.yaml-tmlanguage}
      '3': {name: constant.numeric.key.yaml-tmlanguage}
      '4': {name: punctuation.definition.string.yaml-tmlanguage}
      '5': {name: keyword.control.definition.yaml-tmlanguage}

  repository-key:
    # More like "any key with two leading spaces"
    name: meta.repository-key.yaml-tmlanguage
    match: (?:^\s\s)((["']?)([-\w]+)(\2))(:)
    captures:
      #'1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage} # "string variable" is assigned by certain color schemes
      '2': {name: punctuation.definition.string.yaml-tmlanguage}
      '3': {name: variable.other.repository-key.yaml-tmlanguage} # entity.name.section.repository-key.yaml-tmlanguage
      '4': {name: punctuation.definition.string.yaml-tmlanguage}
      '5': {name: keyword.control.definition.yaml-tmlanguage}

  repository-key-inline:
    # More like "any other key there is"
    name: meta.repository-key.yaml-tmlanguage
    match: (?:,\s+|\{\s*)((["']?)([-\w]+)(\2))(:)
    captures:
      #'1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage} # "string variable" is assigned by certain color schemes
      '2': {name: punctuation.definition.string.yaml-tmlanguage}
      '3': {name: variable.other.repository-key.yaml-tmlanguage}
      '4': {name: punctuation.definition.string.yaml-tmlanguage}
      '5': {name: keyword.control.definition.yaml-tmlanguage}

  unmatched:
    # unmatched list entries (e.g. before "{") and commas before newlines
    match: ^\s*-\s|,(?=\s*$|\s+#)

  illegal:
    name: invalid.illegal.unrecognized.yaml-tmlanguage
    match: '[^\s}]'

  variables:
    name: meta.variables-block.yaml-tmlanguage
    begin: ^((["']?)(variables)(\2))(:)
    beginCaptures:
      '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
      '2': {name: punctuation.definition.string.yaml-tmlanguage}
      '3': {name: entity.other.variables.yaml-tmlanguage}
      '4': {name: punctuation.definition.string.yaml-tmlanguage}
      '5': {name: keyword.control.definition.yaml-tmlanguage}
    end: ^(?!\s*($|#))(?=\S)
    patterns:
      - include: '#comment'
      - include: '#variable'

  variable:
    patterns:
    # multi-line (block style)
    - name: meta.variable.block.yaml-tmlanguage
      contentName: meta.value.yaml-tmlanguage
      begin: ^(\s*)-?(\s+)((["']?)([-_\w]+)(\4))(:)\s+([|>](\d*)[-+]?)(?=,\s|,$|\s+#|\s*$)
      beginCaptures:
        '3': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
        '4': {name: punctuation.definition.string.yaml-tmlanguage}
        '5': {name: keyword.other.variable.yaml-tmlanguage}
        '6': {name: punctuation.definition.string.yaml-tmlanguage}
        '7': {name: keyword.control.definition.yaml-tmlanguage}
        '8': {name: keyword.control.block.yaml-tmlanguage}
        '9': {name: constant.numeric.indentation-indicator.yaml-tmlanguage}
      # must be indented by at least as much as the key line + 1 (+ 1 for the potential '-')
      end: ^(?!\s*$|\1\2\s\s)
      patterns:
      - include: '#comment' # for comments after the "|" or ">"
      - include: source.oniregexp

    # single-line (quoted)
    - name: meta.variable.yaml-tmlanguage
      contentName: meta.value.yaml-tmlanguage
      begin: (?:,\s+|\{\s*|^\s{2,}|^\s*-\s+)((["']?)([-_\w]+)(\2))(:)\s+(["'])
      beginCaptures:
        '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
        '2': {name: punctuation.definition.string.yaml-tmlanguage}
        '3': {name: keyword.other.variable.yaml-tmlanguage}
        '4': {name: punctuation.definition.string.yaml-tmlanguage}
        '5': {name: keyword.control.definition.yaml-tmlanguage}
        '6': {name: punctuation.definition.string.yaml-tmlanguage}
      end: \6(?!\6)
      endCaptures:
        '0': {name: punctuation.definition.string.yaml-tmlanguage}
      patterns:
      # Consume double-escaped single quotes so they won't interfere with the "end" match
      - match: "''"
      - match: '""'
      - include: source.oniregexp

    # single-line (unquoted)
    - name: meta.variable.yaml-tmlanguage
      contentName: meta.value.yaml-tmlanguage
      begin: (?:,\s+|\{\s*|^\s{2,}|^\s*-\s+)((["']?)([-_\w]+)(\2))(:)(?:(?=\s+#)|\s+(?!["'\[{]))
      beginCaptures:
        '1': {name: string.other.quoted-or-unquoted.yaml-tmlanguage}
        '2': {name: punctuation.definition.string.yaml-tmlanguage}
        '3': {name: keyword.other.variable.yaml-tmlanguage}
        '4': {name: punctuation.definition.string.yaml-tmlanguage}
        '5': {name: keyword.control.definition.yaml-tmlanguage}
      # This regexp is complex due to the many possibilities to terminate a string.
      end: (?=,\s|,$|\s+[#{\[]|\s*$|\s*})
      patterns:
      - include: source.oniregexp
...